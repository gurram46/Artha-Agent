# Artha AI Backend Configuration
# Copy this file to .env and update with your actual values

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================
# PostgreSQL connection string
DATABASE_URL=postgresql://artha_user:CHANGE_THIS_PASSWORD@localhost:5432/artha_ai

# Alternative: Individual database connection parameters
# DB_HOST=localhost
# DB_PORT=5432
# DB_NAME=artha_ai
# DB_USER=artha_user
# DB_PASSWORD=CHANGE_THIS_PASSWORD

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================
# IMPORTANT: Generate new keys for production using:
# python -c "import secrets, base64; print(base64.urlsafe_b64encode(secrets.token_bytes(32)).decode())"

# AES encryption key for sensitive data (32 bytes, base64 encoded)
ENCRYPTION_KEY=GENERATE_NEW_KEY_FOR_PRODUCTION

# JWT secret key for token signing (64 bytes, base64 encoded)
JWT_SECRET_KEY=GENERATE_NEW_JWT_SECRET_FOR_PRODUCTION

# JWT configuration
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# ============================================================================
# EXTERNAL API KEYS
# ============================================================================
# Google AI API key for Gemini models
GOOGLE_API_KEY=your-google-api-key-here

# Fi Money MCP authentication token
FI_MCP_AUTH_TOKEN=your-fi-mcp-auth-token-here

# ============================================================================
# CORS CONFIGURATION
# ============================================================================
# Allowed origins for CORS (comma-separated)
# For development: http://localhost:3000,http://localhost:3001,http://localhost:3002
# For production: https://yourdomain.com,https://www.yourdomain.com
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:3002

# ============================================================================
# RATE LIMITING CONFIGURATION
# ============================================================================
# IP addresses to whitelist from rate limiting (comma-separated)
RATE_LIMIT_WHITELIST=127.0.0.1,::1

# ============================================================================
# CACHE CONFIGURATION
# ============================================================================
# Enable/disable caching system
CACHE_ENABLED=true

# Cache time-to-live in hours
CACHE_TTL_HOURS=24

# ============================================================================
# APPLICATION SETTINGS
# ============================================================================
# Environment mode
NODE_ENV=development

# Debug mode (set to false in production)
DEBUG=true

# Log level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# ============================================================================
# HTTPS CONFIGURATION
# ============================================================================
# Force HTTPS redirects in production
FORCE_HTTPS=false

# ============================================================================
# DEPLOYMENT CONFIGURATION
# ============================================================================
# Port for the backend server
PORT=8000

# Host binding
HOST=0.0.0.0

# ============================================================================
# SECURITY NOTES
# ============================================================================
# 1. Never commit this file with real values to version control
# 2. Generate unique keys for each environment (dev, staging, production)
# 3. Use strong, random passwords for database connections
# 4. Regularly rotate API keys and secrets
# 5. Enable HTTPS in production environments
# 6. Review and update CORS origins for production
# 7. Monitor logs for security events

# ============================================================================
# QUICK SETUP COMMANDS
# ============================================================================
# Generate encryption key:
# python -c "import secrets, base64; print('ENCRYPTION_KEY=' + base64.urlsafe_b64encode(secrets.token_bytes(32)).decode())"

# Generate JWT secret:
# python -c "import secrets, base64; print('JWT_SECRET_KEY=' + base64.urlsafe_b64encode(secrets.token_bytes(64)).decode())"

# Generate random password:
# python -c "import secrets, string; print(''.join(secrets.choice(string.ascii_letters + string.digits + '!@#$%^&*') for _ in range(20)))"