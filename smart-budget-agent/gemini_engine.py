import firebase_admin
from firebase_admin import credentials, firestore
import os
from dotenv import load_dotenv

load_dotenv()

# ‚úÖ Firebase initialization
cred_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
if not firebase_admin._apps:
    cred = credentials.Certificate(cred_path)
    firebase_admin.initialize_app(cred)

db = firestore.client()


import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def send_budget_alert(category, total, limit, merchants):
    sender = os.getenv("EMAIL_SENDER")
    password = os.getenv("EMAIL_APP_PASSWORD")
    receiver = os.getenv("EMAIL_RECEIVER", sender)

    msg = MIMEMultipart()
    msg["Subject"] = f"üö® Budget Alert: {category} Overspent"
    msg["From"] = sender
    msg["To"] = receiver

    body = f"""
    ‚ö†Ô∏è Budget Alert for {category}
    
    üí∞ Current Spend: ‚Çπ{total:,.2f}
    üìä Budget Limit: ‚Çπ{limit:,.2f}
    üîÑ Over by: ‚Çπ{(total-limit):,.2f}
    üìà Usage: {(total/limit)*100:.1f}%
    
    üè™ Recent transactions at:
    {', '.join(set(merchants))}
    
    üí° Recommendations:
    ‚Ä¢ Set a daily limit of ‚Çπ{(limit/30):,.2f}
    ‚Ä¢ Consider reducing spending at frequent merchants
    ‚Ä¢ Track expenses more closely for the rest of the month
    """

    msg.attach(MIMEText(body, "plain"))

    try:
        context = ssl.create_default_context()
        with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
            server.login(sender, password)
            server.send_message(msg)
        print("   ‚Ä¢ üìß Budget alert email sent!")
    except Exception as e:
        print(f"   ‚Ä¢ ‚ùå Failed to send email alert: {str(e)}")

def suggest_budget_tips(txn, total, limit, history):
    category = txn.get("category", "Unknown")
    # Safely get merchant names, filtering out None values
    merchants = [tx.get("merchant", "Unknown") for tx in history if tx.get("merchant")]
    
    prompt = f"""
Category: {category}
Spent: ‚Çπ{total}, Limit: ‚Çπ{limit}
Frequent Merchants: {merchants}

Suggest 2 budget tips to reduce overspending in this category.
"""
    # Gemini call placeholder ‚Äî insert API logic here
    print(f"\nüí° Budget Tips for {category}:")
    print(f"   ‚Ä¢ Current spend: ‚Çπ{total:,.2f} / ‚Çπ{limit:,.2f} ({(total/limit)*100:.1f}%)")
    if total > limit:
        print("   ‚Ä¢ ‚ö†Ô∏è Over budget!")
        print(f"   ‚Ä¢ Consider reducing spending at: {', '.join(set(merchants))}")
        print(f"   ‚Ä¢ Set a daily limit of ‚Çπ{(limit/30):,.2f} to stay on track")
        # Send email alert for over-budget categories
        send_budget_alert(category, total, limit, merchants)
    else:
        print("   ‚Ä¢ ‚úÖ Within budget")
        print(f"   ‚Ä¢ Safe to spend: ‚Çπ{(limit-total):,.2f}")
